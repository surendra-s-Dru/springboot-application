pipeline {
   agent
   {
    docker {
      image 'abhishekf5/maven-abhishek-docker-agent:v1'
      args '--user root -v /var/run/docker.sock:/var/run/docker.sock' // mount Docker socket to access the host's Docker daemon
    }
   }
  stages {

    stage('Clean Workspace') {
      steps {
        sh 'rm -rf ${WORKSPACE}/target'
        }
    }    

    stage('Checkout') {
      steps {
        sh 'echo passed'
        //git branch: 'main', url: 'https://github.com/surendra-s-Dru/springboot-application.git'
      }
    }

    stage('Build and Test') {
      steps {
        sh 'ls -ltr'
        // build the project and create a JAR file
        sh 'cd application && mvn clean package'
      }
    }
    stage('Static Code Analysis') {
      environment {
        SONAR_URL = "http://sonar.dru.care:9000"
      }
      steps {
        withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
          sh 'cd application && mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}'
        }
      }
    }
    stage('Build and Push Docker Image') {
      environment {
        readImageTag = readMavenPom file: 'application/pom.xml'
        DOCKER_IMAGE = "test-server:${readImageTag}"
        DOCKERFILE_LOCATION = "springboot-application/application/Dockerfile"
        REGISTRY_CREDENTIALS = credentials('docker-cred')
      }
      steps {
        script {
            // sh 'cd application/src/main/resources/'
            // sh pwd
            // def yamlText = readFile 'bootstrap.yml'
            // def yaml = new org.yaml.snakeyaml.Yaml().load(yamlText)
            // def readImageTag = yaml['tag']
            def readImageTag = readMavenPom file: 'application/pom.xml'
            
            sh 'cd application && docker build -t ${DOCKER_IMAGE} .'
            def dockerImage = docker.image("${DOCKER_IMAGE}")
            docker.withRegistry('https://index.docker.io/v1/', "docker-cred") {
                dockerImage.push()
            }
        }
      }
    }
  }
}